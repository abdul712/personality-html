{
  "version": 3,
  "sources": ["../../../src/index.js"],
  "sourceRoot": "/Users/abdulrahim/GitHub Projects/personality-html/.wrangler/tmp/deploy-l7S8Jm",
  "sourcesContent": ["/**\n * PersonalitySpark Cloudflare Worker\n * Serves static files and handles API requests using new Static Assets\n */\n\nexport default {\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url);\n    \n    try {\n      // Handle API routes first\n      if (url.pathname.startsWith('/api/')) {\n        return handleAPI(request, env);\n      }\n\n      // For all other routes, let static assets handle them\n      // The Worker only runs for API routes due to our configuration\n      return new Response('Not Found', { status: 404 });\n      \n    } catch (e) {\n      console.error('Worker error:', e);\n      return new Response('Internal Server Error', { status: 500 });\n    }\n  },\n};\n\n// API handler for backend functionality\nasync function handleAPI(request, env) {\n  const url = new URL(request.url);\n  const path = url.pathname;\n\n  // CORS headers\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  };\n\n  // Handle preflight requests\n  if (request.method === 'OPTIONS') {\n    return new Response(null, {\n      status: 204,\n      headers: corsHeaders,\n    });\n  }\n\n  // API routes\n  switch (path) {\n    case '/api/health':\n      return new Response(JSON.stringify({ \n        status: 'OK', \n        timestamp: new Date().toISOString(),\n        worker: 'personality-spark',\n        environment: env.ENVIRONMENT || 'development'\n      }), {\n        headers: { 'Content-Type': 'application/json', ...corsHeaders },\n      });\n\n    case '/api/quizzes/types':\n      // Return available quiz types\n      return new Response(JSON.stringify({\n        success: true,\n        quizTypes: [\n          { \n            id: 'big5', \n            name: 'Big 5 Personality', \n            duration: '10-15 min', \n            questions: 30,\n            description: 'Discover your openness, conscientiousness, extraversion, agreeableness, and neuroticism levels.',\n            popular: true\n          },\n          { \n            id: 'daily', \n            name: 'Daily Challenge', \n            duration: '3-5 min', \n            questions: 10,\n            description: 'Quick daily quiz that explores different aspects of your personality each day.',\n            daily: true\n          },\n          { \n            id: 'quick', \n            name: 'Quick Assessment', \n            duration: '2 min', \n            questions: 5,\n            description: 'Get instant personality insights with our rapid-fire 5-question assessment.',\n            quick: true\n          },\n          { \n            id: 'thisorthat', \n            name: 'This or That', \n            duration: '5 min', \n            questions: 15,\n            description: 'Make quick choices between options to reveal your personality preferences and traits.'\n          },\n          { \n            id: 'mood', \n            name: 'Mood-Based Test', \n            duration: '7 min', \n            questions: 20,\n            description: 'Explore how your current mood influences your personality expression and decision-making.'\n          },\n          { \n            id: 'career', \n            name: 'Career Match', \n            duration: '12 min', \n            questions: 25,\n            description: 'Discover which career paths align best with your personality traits and work style.'\n          },\n        ]\n      }), {\n        headers: { 'Content-Type': 'application/json', ...corsHeaders },\n      });\n\n    case '/api/quizzes/generate':\n      if (request.method !== 'POST') {\n        return new Response(JSON.stringify({ error: 'Method not allowed' }), {\n          status: 405,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders },\n        });\n      }\n      \n      try {\n        const body = await request.json();\n        const { quizType, difficulty = 'medium' } = body;\n        \n        // Mock quiz generation (in real implementation, this would call AI service)\n        return new Response(JSON.stringify({\n          success: true,\n          quiz: {\n            id: `quiz_${Date.now()}`,\n            type: quizType,\n            title: `Personality Quiz - ${quizType}`,\n            questions: generateMockQuestions(quizType),\n            estimatedTime: getEstimatedTime(quizType)\n          }\n        }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders },\n        });\n      } catch (e) {\n        return new Response(JSON.stringify({ error: 'Invalid JSON body' }), {\n          status: 400,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders },\n        });\n      }\n\n    default:\n      return new Response(JSON.stringify({ \n        error: 'API endpoint not found',\n        availableEndpoints: ['/api/health', '/api/quizzes/types', '/api/quizzes/generate']\n      }), {\n        status: 404,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders },\n      });\n  }\n}\n\n// Helper function to generate mock quiz questions\nfunction generateMockQuestions(quizType) {\n  const baseQuestions = [\n    {\n      id: 1,\n      text: \"I enjoy meeting new people and socializing\",\n      options: [\n        { text: \"Strongly Agree\", value: 5 },\n        { text: \"Agree\", value: 4 },\n        { text: \"Neutral\", value: 3 },\n        { text: \"Disagree\", value: 2 },\n        { text: \"Strongly Disagree\", value: 1 }\n      ]\n    },\n    {\n      id: 2,\n      text: \"I prefer to plan things in advance rather than be spontaneous\",\n      options: [\n        { text: \"Always\", value: 5 },\n        { text: \"Often\", value: 4 },\n        { text: \"Sometimes\", value: 3 },\n        { text: \"Rarely\", value: 2 },\n        { text: \"Never\", value: 1 }\n      ]\n    },\n    {\n      id: 3,\n      text: \"I am comfortable with taking risks\",\n      options: [\n        { text: \"Very comfortable\", value: 5 },\n        { text: \"Comfortable\", value: 4 },\n        { text: \"Neutral\", value: 3 },\n        { text: \"Uncomfortable\", value: 2 },\n        { text: \"Very uncomfortable\", value: 1 }\n      ]\n    }\n  ];\n\n  // Return different number of questions based on quiz type\n  const questionCounts = {\n    'big5': 30,\n    'daily': 10,\n    'quick': 5,\n    'thisorthat': 15,\n    'mood': 20,\n    'career': 25\n  };\n\n  const count = questionCounts[quizType] || 10;\n  return baseQuestions.slice(0, Math.min(count, baseQuestions.length));\n}\n\n// Helper function to get estimated completion time\nfunction getEstimatedTime(quizType) {\n  const times = {\n    'big5': '10-15 min',\n    'daily': '3-5 min',\n    'quick': '2 min',\n    'thisorthat': '5 min',\n    'mood': '7 min',\n    'career': '12 min'\n  };\n  \n  return times[quizType] || '5 min';\n}"],
  "mappings": "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",
  "names": []
}
